#
# @brief Built in functions and operators
#
# @authors Jakub Křivánek (xkriva30)
#
JUMP main

# BUILT IN FUNCTIONS

LABEL FCSTART$0$READS

PUSHFRAME
CREATEFRAME

DEFVAR TF@string
READ TF@string string

PUSHS TF@string
POPFRAME
RETURN



LABEL FCSTART$0$READI

PUSHFRAME
CREATEFRAME

DEFVAR TF@string
READ TF@string int

PUSHS TF@string
POPFRAME
RETURN



LABEL FCSTART$0$READN

PUSHFRAME
CREATEFRAME

DEFVAR TF@string
READ TF@string float

PUSHS TF@string
POPFRAME
RETURN



LABEL FCSTART$0$WRITE

PUSHFRAME
CREATEFRAME

DEFVAR TF@s
DEFVAR TF@i

POPS TF@i

LABEL write_loop
JUMPIFEQ end_write TF@i int@0
POPS TF@s
WRITE TF@s
SUB TF@i TF@i int@1
JUMP write_loop

LABEL end_write
POPFRAME
RETURN



LABEL FCSTART$0$TOINTEGER

PUSHFRAME
CREATEFRAME

DEFVAR TF@f
POPS TF@f

JUMPIFEQ end_tointeger_nil TF@f nil@nil

DEFVAR TF@i
FLOAT2INT TF@i TF@f
PUSHS TF@i
POPFRAME
RETURN

LABEL end_tointeger_nil
PUSHS nil@nil
POPFRAME
RETURN



LABEL FCSTART$0$SUBSTR
# uses hastag operator

PUSHFRAME
CREATEFRAME

DEFVAR TF@s
DEFVAR TF@i
DEFVAR TF@j
POPS TF@s
POPS TF@i
POPS TF@j

# checks if any parameter is nil
DEFVAR TF@nil_check
EQ TF@nil_check TF@s nil@nil
JUMPIFEQ end_substr_error_8 TF@nil_check bool@true
EQ TF@nil_check TF@i nil@nil
JUMPIFEQ end_substr_error_8 TF@nil_check bool@true
EQ TF@nil_check TF@j nil@nil
JUMPIFEQ end_substr_error_8 TF@nil_check bool@true

# checks if j < i
DEFVAR TF@jlti
LT TF@jlti TF@j TF@i
JUMPIFEQ end_substr_empty TF@jlti bool@true

# check if i and j arent out of bounds 1 to #s
DEFVAR TF@out_of_bounds
DEFVAR TF@len
PUSHS TF@s
CALL hashtag
POPS TF@len
LT TF@out_of_bounds TF@i int@1
JUMPIFEQ end_substr_empty TF@out_of_bounds bool@true
LT TF@out_of_bounds TF@j int@1
JUMPIFEQ end_substr_empty TF@out_of_bounds bool@true
GT TF@out_of_bounds TF@i TF@len
JUMPIFEQ end_substr_empty TF@out_of_bounds bool@true
GT TF@out_of_bounds TF@j TF@len
JUMPIFEQ end_substr_empty TF@out_of_bounds bool@true

# sub i to be have the index from 0
SUB TF@i TF@i int@1

DEFVAR TF@substr
MOVE TF@substr TF@s

DEFVAR TF@loopi
DEFVAR TF@last_escaped
DEFVAR TF@substr_i
DEFVAR TF@esc
DEFVAR TF@c
MOVE TF@last_escaped bool@false
STRLEN TF@len TF@s
MOVE TF@substr_i int@0
MOVE TF@loopi TF@i

# loops throught the string and moves chars to substr
LABEL substr_loop
JUMPIFEQ end_substr TF@loopi TF@j

GETCHAR TF@c TF@s TF@i
ADD TF@i TF@i int@1
ADD TF@loopi TF@loopi int@1

JUMPIFEQ substr_not_escaped TF@last_escaped bool@false
SETCHAR TF@substr TF@substr_i TF@c
ADD TF@substr_i TF@substr_i int@1
MOVE TF@last_escaped bool@false
JUMP substr_loop

LABEL substr_not_escaped
EQ TF@esc TF@c string@\092
JUMPIFEQ substr_esc TF@esc bool@true

SETCHAR TF@substr TF@substr_i TF@c
ADD TF@substr_i TF@substr_i int@1
JUMP substr_loop

LABEL substr_esc
MOVE TF@last_escaped bool@true
SUB TF@loopi TF@loopi int@1
JUMP substr_loop


LABEL end_substr_empty
DEFVAR TF@empty_str
MOVE TF@empty_str string@\000
PUSHS TF@empty_str
POPFRAME
RETURN

LABEL end_substr_error_8
EXIT int@8

LABEL end_substr
SETCHAR TF@substr TF@substr_i string@\003
ADD TF@substr_i TF@substr_i int@1
JUMPIFNEQ end_substr TF@substr_i TF@len
PUSHS TF@substr

POPFRAME
RETURN



LABEL FCSTART$0$ORD
# uses hashtag operator and substr

PUSHFRAME
CREATEFRAME

DEFVAR TF@s
DEFVAR TF@i
POPS TF@s
POPS TF@i

# checks if any parameter is nil
DEFVAR TF@nil_check
EQ TF@nil_check TF@s nil@nil
JUMPIFEQ end_ord_error_8 TF@nil_check bool@true
EQ TF@nil_check TF@i nil@nil
JUMPIFEQ end_ord_error_8 TF@nil_check bool@true

# check if i isnt out of bounds 1 to #s
DEFVAR TF@out_of_bounds
DEFVAR TF@len
PUSHS TF@s
CALL hashtag
POPS TF@len
LT TF@out_of_bounds TF@i int@1
JUMPIFEQ end_ord_nil TF@out_of_bounds bool@true
GT TF@out_of_bounds TF@i TF@len
JUMPIFEQ end_ord_nil TF@out_of_bounds bool@true

PUSHS TF@i
PUSHS TF@i
PUSHS TF@s
CALL substr
POPS TF@s

DEFVAR TF@ord
STRI2INT TF@ord TF@s int@0
PUSHS TF@ord
POPFRAME
RETURN


LABEL end_ord_nil
PUSHS nil@nil
POPFRAME
RETURN

LABEL end_ord_error_8
EXIT int@8



LABEL FCSTART$0$CHR

PUSHFRAME
CREATEFRAME

DEFVAR TF@i
POPS TF@i

# checks if i isnt nil
JUMPIFEQ end_chr_error_8 TF@i nil@nil
DEFVAR TF@out_of_bounds

# checks if i isnt out of bounds
LT TF@out_of_bounds TF@i int@0
JUMPIFEQ end_chr_nil TF@out_of_bounds bool@true
GT TF@out_of_bounds TF@i int@255
JUMPIFEQ end_chr_nil TF@out_of_bounds bool@true

DEFVAR TF@c
INT2CHAR TF@c TF@i
PUSHS TF@c
POPFRAME
RETURN

LABEL end_chr_nil
PUSHS nil@nil
POPFRAME
RETURN

LABEL end_chr_error_8
EXIT int@8



# OPERATORS

LABEL hashtag

PUSHFRAME
CREATEFRAME

DEFVAR TF@str
POPS TF@str
DEFVAR TF@len
STRLEN TF@len TF@str
DEFVAR TF@escaped_len
MOVE TF@escaped_len TF@len

DEFVAR TF@last_escaped
MOVE TF@last_escaped bool@false

DEFVAR TF@i
MOVE TF@i int@0
DEFVAR TF@c

# loops throught the string and subs lenght for every escape sequence
LABEL hashtag_loop
JUMPIFEQ end_hashtag TF@i TF@len

GETCHAR TF@c TF@str TF@i
ADD TF@i TF@i int@1

JUMPIFEQ hastag_not_escaped TF@last_escaped bool@false
MOVE TF@last_escaped bool@false
JUMP hashtag_loop

LABEL hastag_not_escaped
JUMPIFNEQ hashtag_loop TF@c string@\092
SUB TF@escaped_len TF@escaped_len int@1
MOVE TF@last_escaped bool@true
JUMP hashtag_loop


LABEL end_hashtag

PUSHS TF@escaped_len
POPFRAME
RETURN



LABEL concatenation

PUSHFRAME
CREATEFRAME

DEFVAR TF@str1
DEFVAR TF@str2

POPS TF@str1
POPS TF@str2

DEFVAR TF@con

CONCAT TF@con TF@str1 TF@str2
PUSHS TF@con

POPFRAME
RETURN



# OUR FUNCTIONS

LABEL safediv
# function safediv (i: integer, j: integer) : integer
# function safediv (i: number, j: number) : number

PUSHFRAME
CREATEFRAME

DEFVAR TF@i
DEFVAR TF@j

POPS TF@i
POPS TF@j

DEFVAR TF@result

DEFVAR TF@type
TYPE TF@type TF@i
JUMPIFEQ safediv_int TF@type string@int
JUMPIFEQ safediv_number TF@type string@float

# integer div
LABEL safediv_int
JUMPIFEQ safediv_div_zero TF@j int@0
IDIV TF@result TF@i TF@j
PUSHS TF@result

POPFRAME 
RETURN

# number div
LABEL safediv_number
JUMPIFEQ safediv_div_zero TF@j float@0x0p+0
DIV TF@result TF@i TF@j
PUSHS TF@result

POPFRAME 
RETURN

LABEL safediv_div_zero
EXIT int@9



LABEL neg
# function neg (i: integer,) : integer
# function neg (i: number) : number
PUSHFRAME
CREATEFRAME

DEFVAR TF@i

POPS TF@i

DEFVAR TF@type
TYPE TF@type TF@i
JUMPIFEQ neg_int TF@type string@int
JUMPIFEQ neg_number TF@type string@float

LABEL neg_int
sub TF@i int@0 TF@i 
PUSHS TF@i
POPFRAME
RETURN

# number div
LABEL neg_number
sub TF@i float@0x0p+0 TF@i 
PUSHS TF@i
POPFRAME
RETURN



# MAIN FOR TESTING
LABEL main

CREATEFRAME

# reads TEST
WRITE string@READS\032TEST:\010
CALL FCSTART$0$READS
DEFVAR TF@test
POPS TF@test
WRITE TF@test
DEFVAR TF@types
TYPE TF@types TF@test
WRITE string@\010
WRITE TF@types
WRITE string@\010\010
CREATEFRAME

# readi TEST
WRITE string@READI\032TEST:\010
CALL FCSTART$0$READS
DEFVAR TF@test
POPS TF@test
WRITE TF@test
DEFVAR TF@types
TYPE TF@types TF@test
WRITE string@\010
WRITE TF@types
WRITE string@\010\010
CREATEFRAME

# readn TEST
WRITE string@READN\032TEST:\010
CALL FCSTART$0$READN
DEFVAR TF@test
POPS TF@test
WRITE TF@test
DEFVAR TF@types
TYPE TF@types TF@test
WRITE string@\010
WRITE TF@types
WRITE string@\010\010
CREATEFRAME

# write TEST
WRITE string@WRITE\032TEST:\010
DEFVAR TF@string1
READ TF@string1 string
DEFVAR TF@string2
READ TF@string2 string
PUSHS TF@string2
PUSHS TF@string1
PUSHS int@2
CALL FCSTART$0$WRITE
WRITE string@\010\010
CREATEFRAME

# tointeger TEST
WRITE string@TOINTEGER\032TEST:\010
DEFVAR TF@num
READ TF@num float
PUSHS TF@num
CALL FCSTART$0$TOINTEGER
DEFVAR TF@i
POPS TF@i
DPRINT TF@i
DEFVAR TF@types
TYPE TF@types TF@i
WRITE string@\010
WRITE TF@types
WRITE string@\010\010
CREATEFRAME

# substr TEST
WRITE string@SUBSTR\032TEST:\010
DEFVAR TF@string
READ TF@string string
DEFVAR TF@i
READ TF@i int
DEFVAR TF@j
READ TF@j int
PUSHS TF@j
PUSHS TF@i
PUSHS TF@string
CALL FCSTART$0$SUBSTR
DEFVAR TF@test
POPS TF@test
WRITE TF@test
WRITE string@\010\010
CREATEFRAME

# ord TEST
WRITE string@ORD\032TEST:\010
DEFVAR TF@string
READ TF@string string
DEFVAR TF@i
READ TF@i int
PUSHS TF@i
PUSHS TF@string
CALL FCSTART$0$ORD
DEFVAR TF@test
POPS TF@test
WRITE TF@test
WRITE string@\010\010
CREATEFRAME

# chr TEST
WRITE string@CHR\032TEST:\010
DEFVAR TF@i
READ TF@i int
PUSHS TF@i
CALL FCSTART$0$CHR
DEFVAR TF@test
POPS TF@test
WRITE TF@test
WRITE string@\010\010
CREATEFRAME

# hastag TEST
WRITE string@HASHTAG\032TEST:\010
DEFVAR TF@string
READ TF@string string
PUSHS TF@string
CALL hashtag
DEFVAR TF@test
POPS TF@test
WRITE TF@test
WRITE string@\010\010
CREATEFRAME

# concatenation TEST
WRITE string@CONCATENATION\032TEST:\010
DEFVAR TF@string1
READ TF@string1 string
DEFVAR TF@string2
READ TF@string2 string
PUSHS TF@string2
PUSHS TF@string1
CALL concatenation
DEFVAR TF@test
POPS TF@test
WRITE TF@test
WRITE string@\010\010
CREATEFRAME

# safediv TEST INT
WRITE string@SAFEDIV\032INT\032TEST:\010
DEFVAR TF@int1
READ TF@int1 int
DEFVAR TF@int2
READ TF@int2 int
PUSHS TF@int2
PUSHS TF@int1
CALL safediv
DEFVAR TF@test
POPS TF@test
WRITE TF@test
WRITE string@\010\010
CREATEFRAME

# safediv TEST NUMBER
WRITE string@SAFEDIV\032FLOAT\032TEST:\010
DEFVAR TF@float1
READ TF@float1 float
DEFVAR TF@float2
READ TF@float2 float
PUSHS TF@float2
PUSHS TF@float1
CALL safediv
DEFVAR TF@test
POPS TF@test
WRITE TF@test
WRITE string@\010
DEFVAR TF@testtoint
FLOAT2INT TF@testtoint TF@test
WRITE TF@testtoint
WRITE string@\010\010
CREATEFRAME

# neg TEST 
WRITE string@NEG\032TEST:\010
DEFVAR TF@int
READ TF@int int
PUSHS TF@int
CALL neg
DEFVAR TF@test
POPS TF@test
WRITE TF@test
WRITE string@\010\010
DEFVAR TF@float
READ TF@float float
PUSHS TF@float
CALL neg
POPS TF@test
WRITE TF@test
WRITE string@\010
DEFVAR TF@testtoint
FLOAT2INT TF@testtoint TF@test
WRITE TF@testtoint
WRITE string@\010\010
CREATEFRAME