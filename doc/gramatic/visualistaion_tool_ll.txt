START ::= PROLOG PROG
PROLOG ::= require string
PROG ::= id ID_NEXT assigen EXP_OR_FUNC  PROG
PROG ::= FUNCTION PROG
PROG ::= DECLARATION PROG
PROG ::= WHILE PROG
PROG ::= IF PROG
PROG ::= RETURN
PROG ::= FUNC_CALL PROG
PROG ::= ''
EXP_OR_FUNC ::= expresion N_EXPRESIONS
EXP_OR_FUNC ::= FUNC_CALL
FUNC_CALL ::=func_call F_ARG rbr
F_ARG ::=''
F_ARG ::=experesion F_ARG_N
F_ARG_N ::=''
F_ARG_N ::= comma experesion F_ARG_N
ID_NEXT ::= comma id ID_NEXT
ID_NEXT ::= ''
N_EXPRESIONS ::= comma expresion N_EXPRESIONS
N_EXPRESIONS ::= ''
WHILE ::= while expresion do PROG end
IF ::= if expresion then PROG ELSE_M end
ELSE_M ::= else PROG
ELSE_M ::= ''
FUNCTION ::= function func_call ARG rbr RETURN_D PROG end
ARG ::= ''
ARG ::= id colon TYPE ARGNEXT
ARGNEXT ::= comma id colon TYPE ARGNEXT
ARGNEXT ::= ''
RETURN_D ::= colon TYPE RETURN_DN
RETURN_D ::= ''
RETURN_DN ::= comma TYPE RETURN_DN
RETURN_DN ::= ''
RETURN ::= return RETURN_ARG
RETURN_ARG ::= expresion RETURN_ARG_N
RETURN_ARG ::= ''
RETURN_ARG_N ::= comma expresion RETURN_ARG_N
RETURN_ARG_N ::= ''
DECLARATION ::= RANGE id colon DECLARATION_T
DECLARATION_T ::= TYPE ASSIGEN_MAY
DECLARATION_T ::= function lbr ARG_D rbr colon RET_D
ARG_D ::= ''
ARG_D ::= TYPE ARG_DN
ARG_DN ::= comma TYPE ARG_DN
ARG_DN ::= ''
RET_D ::= ''
RET_D ::= TYPE RET_DN
RET_DN ::= comma TYPE RET_DN
RET_DN ::= ''
ASSIGEN_MAY ::= ''
ASSIGEN_MAY ::= assigen EXP_OR_FUNC 
TYPE ::= integer
TYPE ::= nil
TYPE ::= number
TYPE ::= string
RANGE ::= local
RANGE ::= global
