%token id require string comma assigen expresion while do end if else  function lbr rbr colon return integer nil number string local global then
%% /* LL(1) */
START:PROLOG PROG ;
PROLOG:require string;
PROG:id ID_NEXT assigen expresion N_EXPRESIONS PROG
|FUNCTION PROG
|DECLARATION PROG
|WHILE PROG
|IF PROG
|/*eps*/;
ID_NEXT:comma id ID_NEXT
|/*eps*/;
N_EXPRESIONS: comma expresion N_EXPRESIONS
|/*eps*/;
WHILE: while expresion do PROG end;
IF:if expresion then PROG ELSE_M end;
ELSE_M: else PROG
| /*eps*/;
FUNCTION:function id lbr ARG ARGNEXT rbr RETURN_D PROG RETURN end;
ARG:/*eps*/
|id colon TYPE;
ARGNEXT:comma ARG ARGNEXT
|/*eps*/;
RETURN_D:TYPE RETURN_DN
|/*eps*/;
RETURN_DN:comma RETURN_D
|/*eps*/;
RETURN:return RETURN_ARG PROG
|/*eps*/;
RETURN_ARG:expresion RETURN_ARG_N
|/*eps*/;
RETURN_ARG_N:comma RETURN_ARG
|/*eps*/;
DECLARATION: RANGE id colon DECLARATION_T;
DECLARATION_T:TYPE ASSIGEN_MAY
|function lbr ARG_D rbr colon ARG_D;
ARG_D:/*eps*/
|TYPE ARG_DN;
ARG_DN:colon ARG_D
|/*eps*/;
ASSIGEN_MAY:/*eps*/
|assigen expresion;
TYPE:integer
|nil
|number
|string;
RANGE:local
|global;