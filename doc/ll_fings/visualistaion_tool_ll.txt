START ::= PROLOG PROG
PROLOG ::= require string
PROG ::= id ID_NEXT assigen expresion N_EXPRESIONS PROG
PROG ::= FUNCTION PROG
PROG ::= DECLARATION PROG
PROG ::= WHILE PROG
PROG ::= IF PROG
PROG ::= ''
ID_NEXT ::= comma id ID_NEXT
ID_NEXT ::= ''
N_EXPRESIONS ::= comma expresion N_EXPRESIONS
N_EXPRESIONS ::= ''
WHILE ::= while expresion do PROG end
IF ::= if expresion then PROG ELSE_M end
ELSE_M ::= else PROG
ELSE_M ::= ''
FUNCTION ::= function id lbr ARG ARGNEXT rbr RETURN_D PROG RETURN end
ARG ::= ''
ARG ::= id colon TYPE
ARGNEXT ::= comma ARG ARGNEXT
ARGNEXT ::= ''
RETURN_D ::= TYPE RETURN_DN
RETURN_D ::= ''
RETURN_DN ::= comma RETURN_D
RETURN_DN ::= ''
RETURN ::= return RETURN_ARG PROG
RETURN ::= ''
RETURN_ARG ::= expresion RETURN_ARG_N
RETURN_ARG ::= ''
RETURN_ARG_N ::= comma RETURN_ARG
RETURN_ARG_N ::= ''
DECLARATION ::= RANGE id colon DECLARATION_T
DECLARATION_T ::= TYPE ASSIGEN_MAY
DECLARATION_T ::= function lbr ARG_D rbr colon ARG_D
ARG_D ::= ''
ARG_D ::= TYPE ARG_DN
ARG_DN ::= colon ARG_D
ARG_DN ::= ''
ASSIGEN_MAY ::= ''
ASSIGEN_MAY ::= assigen expresion
TYPE ::= integer
TYPE ::= nil
TYPE ::= number
TYPE ::= string
RANGE ::= local
RANGE ::= global
