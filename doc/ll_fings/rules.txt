START → PROLOG PROG
PROLOG → require string
PROG → id ID_NEXT assigen EXP_OR_FUNC  PROG
PROG → FUNCTION PROG
PROG → DECLARATION PROG
PROG → WHILE PROG
PROG → IF PROG
PROG → RETURN PROG
PROG → FUNC_CALL PROG
PROG → ε
EXP_OR_FUNC → expresion N_EXPRESIONS
EXP_OR_FUNC → FUNC_CALL
FUNC_CALL →func_call F_ARG rbr
F_ARG →ε
F_ARG →experesion F_ARG_N
F_ARG_N →ε
F_ARG_N → comma experesion F_ARG_N
ID_NEXT → comma id ID_NEXT
ID_NEXT → ε
N_EXPRESIONS → comma expresion N_EXPRESIONS
N_EXPRESIONS → ε
WHILE → while expresion do PROG end
IF → if expresion then PROG ELSE_M end
ELSE_M → else PROG
ELSE_M → ε
FUNCTION → function id lbr ARG ARGNEXT rbr RETURN_D PROG end
ARG → ε
ARG → id colon TYPE
ARGNEXT → comma ARG ARGNEXT
ARGNEXT → ε
RETURN_D → TYPE RETURN_DN
RETURN_D → ε
RETURN_DN → comma TYPE RETURN_DN
RETURN_DN → ε
RETURN → return RETURN_ARG
RETURN_ARG → expresion RETURN_ARG_N
RETURN_ARG → ε
RETURN_ARG_N → comma expresion RETURN_ARG_N
RETURN_ARG_N → ε
DECLARATION → RANGE id colon DECLARATION_T
DECLARATION_T → TYPE ASSIGEN_MAY
DECLARATION_T → function lbr ARG_D rbr colon ARG_D
ARG_D → ε
ARG_D → TYPE ARG_DN
ARG_DN → colon TYPE ARG_DN
ARG_DN → ε
RET_D → ε
RET_D → TYPE RET_DN
RET_DN → colon TYPE RET_DN
RET_DN → ε
ASSIGEN_MAY → ε
ASSIGEN_MAY → assigen expresion
TYPE → integer
TYPE → nil
TYPE → number
TYPE → string
RANGE → local
RANGE → global